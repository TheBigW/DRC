#!/bin/bash

# Automatic measuring script
# Copyright (C) 2002-2005 Denis Sbragion

# This program may be freely redistributed under the terms of
# the GNU GPL and is provided to you as is, without any warranty
# of any kind. Please read the file "COPYING" for details.

# Useful programs
ECHO="echo"
RM="rm"
MV="mv"
GLSWEEP="glsweep"
SOX="sox"
LSCONV="lsconv"
APLAY="aplay"
ARECORD="arecord"
SYNC="sync"
SLEEP="sleep"
TEST_MODE=false

# Default parameters
TMP="/tmp"
LEADIN="0.05"
LEADOUT="0.005"
MINGAIN="0.1"
DLSTART="0.9"

$ECHO 
$ECHO "Automatic measuring script."
$ECHO "Copyright (C) 2002-2005 Denis Sbragion"
$ECHO 
$ECHO "This program may be freely redistributed under the terms of"
$ECHO "the GNU GPL and is provided to you as is, without any warranty"
$ECHO "of any kind. Please read the file "COPYING" for details."
$ECHO 

# Get command line parameters
BITS="$1"
RATE="$2"
STARTF="$3"
ENDF="$4"
LSLEN="$5"
LSSIL="$6"
INDEV="$7"
OUTDEV="$8"
IMPFILE="$9"
AMPLITUDE="${10}"
REC_CHANNEL="${11}"
MEASURE_LOOPS="${12}"
PLAY_CHANNEL="${13}"
SWEEPFILE="sweep.pcm"

# Generate the log sweep
$ECHO "all parameters " $BITS $RATE $STARTF $ENDF $LSLEN $LSSIL $INDEV $OUTDEV $IMPFILE $AMPLITUDE $REC_CHANNEL $MEASURE_LOOPS $PLAY_CHANNEL

# Check bits to use
if [ "$BITS" == "24" ]; then
 SOXFMT="-e signed-integer -b 24"
 ARECORDFMT="S24_3LE"
elif [ "$BITS" == "32" ]; then
 SOXFMT="-e signed-integer -b 32"
 ARECORDFMT="S32_LE"
else
 SOXFMT="-e signed-integer -b 16"
 ARECORDFMT="S16_LE"
fi

$ECHO "sox params : " $SOXFMT

# determine channel to play the sweep to

if [ -z "$PLAY_CHANNEL" ]; then
 PLAY_SWEEP_PARAM=""
elif [ "$PLAY_CHANNEL" == "l" ]; then
 PLAY_SWEEP_PARAM="remix 1 0"
elif [ "$PLAY_CHANNEL" == "r" ]; then
 PLAY_SWEEP_PARAM="remix 0 1"
fi

$ECHO "PLAY_SWEEP_PARAM : " $PLAY_SWEEP_PARAM

$ECHO "generating sweep " $RATE $AMPLITUDE $STARTF $ENDF $LSLEN $LSSIL $LEADIN $LEADOUT ${TMP}/msrawsweep.pcm ${TMP}/msinverse.pcm
$GLSWEEP $RATE $AMPLITUDE $STARTF $ENDF $LSLEN $LSSIL $LEADIN $LEADOUT ${TMP}/msrawsweep.pcm ${TMP}/msinverse.pcm

# Convert to WAV file
$ECHO "Converting sweep to play format..."
$SOX -t raw -r $RATE -c 1 -e float -b32 ${TMP}/msrawsweep.pcm -t wav -r $RATE -c 2 $SOXFMT ${TMP}/msplaysweep.wav $PLAY_SWEEP_PARAM

# Filesystem sync
$ECHO "Waiting 5 seconds for filesystem sync..."
$SYNC

REC_SWEEP_BASE=${TMP}/msrecsweep${PLAY_CHANNEL}
REC_SWEEP_FILE_WAV=$REC_SWEEP_BASE.wav
REC_SWEEP_FILE_PCM=$REC_SWEEP_BASE.pcm
MERGE_FILES=""

#loop over MEASURE_LOOPS
for ((i=1;i<=MEASURE_LOOPS;i++));
do
	$SLEEP 5
	LOOP_REC_PCM_NAME=$REC_SWEEP_BASE$i.pcm
	LOOP_REC_WAV_NAME=$REC_SWEEP_BASE$i.wav
	# Record the sweep
	$ECHO "Sweep recording."
	$SLEEP 1
	RLEN=$(( $LSLEN + $LSSIL * 2 ))
	$APLAY -D $OUTDEV ${TMP}/msplaysweep.wav &
	if [ $TEST_MODE == true ]; then\
		echo "simulating record!!!\n"
		LOOP_AMPLITUDE=$(bc <<< "scale=2;$AMPLITUDE +($i/10)")
		SIM_AMPLITUDE=$LOOP_AMPLITUDE
		echo "Sim Amplitude: "$SIM_AMPLITUDE" to : "$LOOP_REC_WAV_NAME"\n"
		$GLSWEEP $RATE $SIM_AMPLITUDE $STARTF $ENDF $LSLEN $LSSIL $LEADIN $LEADOUT $LOOP_REC_PCM_NAME ${TMP}/dummy_inverse.pcm
		$SOX -t raw -r $RATE -c 1 -e float -b32 $LOOP_REC_PCM_NAME -t wav -r $RATE -c 1 $SOXFMT $LOOP_REC_WAV_NAME $PLAY_SWEEP_PARAM
	else
		$ARECORD -D $INDEV -t wav -r $RATE -f $ARECORDFMT -c $REC_CHANNEL -d $RLEN $LOOP_REC_WAV_NAME
	fi	
	MERGE_FILES=$MERGE_FILES" "$LOOP_REC_WAV_NAME
done

#merge all individual measurements
if [ $MEASURE_LOOPS == 1 ]; then\
	mv $LOOP_REC_WAV_NAME $REC_SWEEP_FILE_WAV
else
	sox -m $MERGE_FILES $REC_SWEEP_FILE_WAV
fi

$ECHO "recorded sweep conversion"
$SOX $REC_SWEEP_FILE_WAV -t raw -r $RATE -e float -b 32 -c 1 $REC_SWEEP_FILE_PCM remix 1 0

IMP_FILE_PCM="${TMP}/measured_impulse${PLAY_CHANNEL}.pcm"

# Extract the impulse response
$LSCONV $REC_SWEEP_FILE_PCM ${TMP}/msinverse.pcm $IMP_FILE_PCM $REF_PARAM 


#convert the result to wav
$SOX -t raw -r $RATE -c 1 -e float -b32 $IMP_FILE_PCM -t wav -r $RATE -c 1 $SOXFMT $IMPFILE


